name: CI

on:
  push:
    branches: [main]
  workflow_dispatch:
  workflow_run:
    workflows: ["Accept PR"]
    types:
      - completed

jobs:
  build_test_analyze:
    name: Build, test and analyze code quality
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_run' || (github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      CONFIGURATION: Release

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: microsoft
          java-version: 11

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Start analyzation with SonarCloud
        run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"TryAtSoftware_Extensions" /o:"tryatsoftware" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

      - name: Restore dependencies
        run: dotnet restore
      - name: Build the solution
        run: dotnet build --no-restore --configuration "${{ env.CONFIGURATION }}"
      - name: Test the solution
        run: dotnet test --no-build --configuration "${{ env.CONFIGURATION }}" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Finalize analyzation with SonarCloud
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
