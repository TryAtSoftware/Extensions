name: Publish packages

on:
  workflow_dispatch:

jobs:
  publish:
    name: Publish NuGet packages
    runs-on: ubuntu-latest
    env:
      NUGET_KEY: ${{ secrets.NUGET_KEY }}
      CONFIGURATION: Release
      PACKAGES_DIRECTORY: ./packages
      NUGET_SOURCE: https://api.nuget.org/v3/index.json

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.1.x
            7.x
            8.x
            9.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration "${{ env.CONFIGURATION }}"

      - name: Pack 'Collection extensions'
        run: dotnet pack --no-build --configuration "${{ env.CONFIGURATION }}" ./TryAtSoftware.Extensions.Collections/TryAtSoftware.Extensions.Collections.csproj -o "${{ env.PACKAGES_DIRECTORY }}"

      - name: Pack 'Reflection extensions'
        run: dotnet pack --no-build --configuration "${{ env.CONFIGURATION }}" ./TryAtSoftware.Extensions.Reflection/TryAtSoftware.Extensions.Reflection.csproj -o "${{ env.PACKAGES_DIRECTORY }}"

      - name: Pack 'Dependency injection extensions'
        run: dotnet pack --no-build --configuration "${{ env.CONFIGURATION }}" ./TryAtSoftware.Extensions.DependencyInjection/TryAtSoftware.Extensions.DependencyInjection.csproj -o "${{ env.PACKAGES_DIRECTORY }}"

      - name: Pack 'Dependency injection extensions (Standard)'
        run: dotnet pack --no-build --configuration "${{ env.CONFIGURATION }}" ./TryAtSoftware.Extensions.DependencyInjection.Standard/TryAtSoftware.Extensions.DependencyInjection.Standard.csproj -o "${{ env.PACKAGES_DIRECTORY }}"

      - name: Publish all packages
        run: dotnet nuget push "${{ env.PACKAGES_DIRECTORY }}/*.nupkg" --source "${{ env.NUGET_SOURCE }}" --api-key "${{ env.NUGET_KEY }}" --skip-duplicate
